ls
debug(ls)
ls
exit
1
2
debug
library(datasets)
data("iris")
tapply(iris$Sepal.Length, iris$Species, mean)
data(mtcars)
x <- tapply(mtcars$mpg, mtcars$cyl, mean)
x
x[4] - x[2]
x[4]
x
15.1-26.7
mtars
mtcars
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x
209.21429-82.63636
makeCacheMatrix <- function(x = matrix()) {
cache <- NULL
set <- function(y = matrix()) {
x <<- y
cache <<- NULL
}
get <- function() x
setcache <- function(solve) cache <<- solve
getcache <- function() cache
list(set = set, get = get, setcache = setcache, getcache = getcache)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
cache <- x$getcache()
if(!is.null(cache)) {
message("Retrieving cached inverse")
return(cache)
}
matrix <- x$get()
cache <- solve(matrix, ...)
x$setcahce(cache)
## Return a matrix that is the inverse of 'x'
}
a <- matrix(1:1000, 1, 1000)
a
makeCacheMatrix(x)
x <- makeCacheMatrix(a)
x
makeCacheMatrix <- function(x = matrix()) {
cache <- NULL
set <- function(y = matrix()) {
x <<- y
cache <<- NULL
}
get <- function() {
x
}
setcache <- function(solve) {
cache <<- solve
}
getcache <- function() {
cache
}
list(set = set, get = get, setcache = setcache, getcache = getcache)
}
x <- makeCacheMatrix(a)
x
makeCacheMatrix <- function(x = matrix()) {
cache <- NULL
set <- function(y) {
x <<- y
cache <<- NULL
}
get <- function() {
x
}
setcache <- function(solve) {
cache <<- solve
}
getcache <- function() {
cache
}
list(set = set, get = get, setcache = setcache, getcache = getcache)
}
x <- makeCacheMatrix(a)
x
x$set(a)
x
x$set
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(1:2)
v <- makeVector(1:2)
v
v$get()
a$get()
x$get()
x$getcache()
makeCacheMatrix()
x <- makeCacheMatrix()
x$set(a)
x$getcache()
x$setcache(a)
makeCacheMatrix <- function(x = matrix()) {
cache <- NULL
set <- function(y) {
x <<- y
cache <<- NULL
}
get <- function() {
x
}
setcache <- function(solve) {
cache <<- solve(solve)
}
getcache <- function() {
cache
}
list(set = set, get = get, setcache = setcache, getcache = getcache)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
cache <- x$getcache()
if(!is.null(cache)) {
message("Retrieving cached inverse")
return(cache)
}
matrix <- x$get()
cache <- solve(matrix, ...)
x$setcahce(cache)
## Return a matrix that is the inverse of 'x'
}
x <- makeCacheMatrix()
x$set(a)
x$setcache(a)
a <- matrix(1:10000, 100, 100)
x$set(a)
x$setcache(a)
a
solve(a)
a(c(1:5000, 5000:1), 100, 100)
a <- matrix(c(1:5000, 5000:1), 100, 100)
a
x
x$set(a)
x$setcache(a)
a <- matrix(c(135, 668, 777, 69), 2, 2)
a
x$set(a)
x$setcache(a)
x$getcache()
cacheSolve(a)
cacheSolve(x)
b <- matrix(c(564, 7894, 453, 956), 2, 2)
makeCacheMatrix(b)
y <- makeCacheMatrix(b)
b
y$get()
cacheSolve(y)
## makeCacheMatrix creates a list of functions that can store a matrix and
## its inverse. cacheSolve can retrieve a stored inverse from a cacheMatrix,
## or solve for the inverse and then store it.
## Create a list to store a matrix and cache its inverse, as well as
## functions to set a new matrix and its corresponding inverse
makeCacheMatrix <- function(x = matrix()) {
cache <- NULL
set <- function(y) {
x <<- y
cache <<- NULL
}
get <- function() {
x
}
setcache <- function(solve) {
cache <<- solve(solve)
}
getcache <- function() {
cache
}
list(set = set, get = get, setcache = setcache, getcache = getcache)
}
## Returns a cacheMatrix's stored inverse matrix, or solves for the inverse
## if one has not been solved prior
cacheSolve <- function(x, ...) {
cache <- x$getcache()
if(!is.null(cache)) {
message("Retrieviorng cached inverse")
return(cache)
}
matrix <- x$get()
cache <- solve(matrix, ...)
x$setcache(cache)
cache
## Return a matrix that is the inverse of 'x'
}
cacheSolve(y)
y$getcache()
y
y$get()
y$getcache()
y <- makeCacheMatrix(b)
y$getcache()
cacheSolve(y)
y$getcache
y$getcache()
y$setcache(b)
y$getcache()
## makeCacheMatrix creates a list of functions that can store a matrix and
## its inverse. cacheSolve can retrieve a stored inverse from a cacheMatrix,
## or solve for the inverse and then store it.
## Create a list of functions to store and retrieve a matrix and its inverse
makeCacheMatrix <- function(x = matrix()) {
cache <- NULL
set <- function(y) {
x <<- y
cache <<- NULL
}
get <- function() {
x
}
setcache <- function(inverse) {
cache <<- inverse
}
getcache <- function() {
cache
}
list(set = set, get = get, setcache = setcache, getcache = getcache)
}
## Returns a cacheMatrix's stored inverse matrix, or solves for the inverse
## if one has not been solved prior
cacheSolve <- function(x, ...) {
cache <- x$getcache()
if(!is.null(cache)) {
message("Retrieviorng cached inverse")
return(cache)
}
matrix <- x$get()
cache <- solve(matrix, ...)
x$setcache(cache)
cache
## Return a matrix that is the inverse of 'x'
}
a <- matrix(c(2132321, 456458, 651623, 456456), 2, 2)
x <- makeCacheMatrix(a)
x$get()
x$getcache()
cacheSolve(x)
x$getcache()
test <- makeCacheMatrix(a)
test
test$get()
set.seed(10)
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
R.home()
install.packages("RMySQL", type = "source")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(knitr)
install.packages(knitr)
install.packages("knitr")
setwd("~/Coursera/Data Science 5 - Reproducible Research/RepData_PeerAssessment1")
table <- read.csv("activity.csv")
head(table)
str(table)
naRemoved <- table[!is.na(table$steps),]
head(naRemoved)
tapply(table$steps, table$date, sum)
tapply(naRemoved$steps, naRemoved$date, sum)
sum(table)
str(table)
str(table$interval)
table$interval
ts(table)
ts(table$steps, frequency = 288)
x <- ts(table$steps, frequency = 288)
plot.ts(x)
aggregate(table$steps, table$interval)
aggregate(table$steps, table$interval, sum)
aggregate(table$steps, as.list(table$interval), sum)
aggregate(x = table$steps, by = as.list(table$interval), sum)
length(table$steps)
length(as.list(table$interval))
aggregate(x = table$steps, by = as.list(table$interval), sum)
aggregate(x = table, by = as.list(table$interval), sum)
aggregate(table$step ~ table$interval, sum)
aggregate(table$steps ~ table$interval, sum)
aggregate(table ~ table$interval, sum)
head(table)
with(table, by(steps, inteval, sum))
with(table, by(steps, interval, sum))
a <- table[!is.na(table$steps),]
with(a, by(steps, interval, sum))
b <- with(a, by(steps, interval, sum))
ts(b)
naRemoved <- table[!is.na(table$steps),]
length(table)
length(table$steps)
length(is.na(table$steps))
naRemoved <- table[!is.na(table$steps),]
naRemoved <- table[,!is.na(table$steps)]
dailyAverage <- with(naRemoved, by(steps, interval, sum))
pattern <- ts(dailyAverage)
plot.ts(pattern)
pattern
str(dailyAverage)
str(pattern)
plot.ts(pattern, plot.type = 1)
plot.ts(pattern)
plot(patter)
plot(pattern)
plot(pattern, type = l)
dim(pattern)
length(pattern)
plot(pattern, type = l)
dailyAverage
dailyAverage <- with(naRemoved, by(steps, interval, mean))
dailyAverage
pattern <- ts(dailyAverage)
plot.ts(pattern)
pattern
dim(pattern)
c <- cbind(pattern, table$interval[1:288])
c
plot(c, type = l)
plot(c, type = "l")
colnames(c)
plot(x = c$table$interval[1:288], y = c$pattern type = "l")
plot(x = c$table$interval[1:288], y = c$pattern, type = "l")
plot(x = c$"table$interval[1:288]", y = c$pattern, type = "l")
plot(c)
colnames(c) <- c("Y", "X")
plot(c$X, c$Y)
c$X
c
plot(X, Y)
plot(c[1,], c[2,])
plot(c[,1], c[,2])
plot(c[,2], c[,1], type = l)
plot(c[,2], c[,1], type = "l")
plot(pattern)
dailyAverage
as.vectory(dailyAverage)
as.vector(dailyAverage)
dailyAverage <- with(naRemoved, by(steps, interval, mean, simplify = FALSE))
dailyAverage
dailyAverage <- with(naRemoved, by(steps, interval, mean))
aggregate(steps ~ interval, naRemoved, mean)
dailyAverage <- aggregate(steps ~ interval, naRemoved, mean)
plot(dailyAverage)
plot(dailyAverage, type = "l")
max(dailyAverage)
max(dailyAverage$steps)
which.max(dailyAverage$steps)
dailyAverage[which.max(dailyAverage$steps),1]
dailyAverage[which.max(dailyAverage$steps),2]
sum(is.na(table$steps))
na <- table[is.na(table$steps),]
is.na(table$steps)
View(a)
table[1]
table[,1]
table[1,]
table[1,3]
table[2,3]
dailyAverage
dailyAverage[dailyAverage$interval = 835,]
dailyAverage[dailyAverage$interval == 835,]
dailyAverage[dailyAverage$interval == 835, 2]
str(imputed)
imputed <- table
for (i in 1:length(missing)) {
if (missing[i]) {
interval <- imputed[i,3]
imputed$steps[i] <- dailyAverage[dailyAverage$interval == interval, 2]
}
}
missing = is.na(table$steps)
sum(missing)
imputed <- table
for (i in 1:length(missing)) {
if (missing[i]) {
interval <- imputed[i,3]
imputed$steps[i] <- dailyAverage[dailyAverage$interval == interval, 2]
}
}
str(imputed)
weekdays(as.Date(imputed$date))
is.Date(weekdays(as.Date(imputed$date)))
is.character(weekdays(as.Date(imputed$date)))
weekdays <- factor(levels = c("Weekday", "Weekend"))
cbind(imputed, weekdays(as.Date(imputed$date)))
days <- weekdays(as.Date(imputed$date))
weekdays <- factor(levels = c("Weekday", "Weekend"))
for (i in 1:length(days)) {
if (days[i] == "Saturday" | days[i] == "Sunday") {
append(weekdays, "Weekend")
} else {append(weekdays, "Weekday")}
}
weekdays
days
days <- weekdays(as.Date(imputed$date))
weekdays <- vector()
for (i in 1:length(days)) {
if (days[i] == "Saturday" | days[i] == "Sunday") {
append(weekdays, "Weekend")
} else {append(weekdays, "Weekday")}
}
weekdays
days <- weekdays(as.Date(imputed$date))
weekdays <- vector(length = length(days))
for (i in 1:length(days)) {
if (days[i] == "Saturday" | days[i] == "Sunday") {
append(weekdays, "Weekend")
} else {append(weekdays, "Weekday")}
}
days <- weekdays(as.Date(imputed$date))
weekdays <- vector(length = length(days))
for (i in 1:length(days)) {
if (days[i] == "Saturday" | days[i] == "Sunday") {
append(weekdays, "Weekend")
} else {append(weekdays, "Weekday")}
}
days <- weekdays(as.Date(imputed$date))
weekdays <- vector(length = length(days))
for (i in 1:length(days)) {
if (days[i] == "Saturday" | days[i] == "Sunday") {
weekdays[i] <- "Weekend"
} else {weekdays[i] <- "Weekday"}
}
weekdays
str(as.factor(weekdays))
days <- weekdays(as.Date(imputed$date))
weekdays <- vector(length = length(days))
for (i in 1:length(days)) {
if (days[i] == "Saturday" | days[i] == "Sunday") {
weekdays[i] <- "Weekend"
} else {weekdays[i] <- "Weekday"}
}
cbind(imputed, weekdays)
days <- weekdays(as.Date(imputed$date))
weekdays <- vector(length = length(days))
for (i in 1:length(days)) {
if (days[i] == "Saturday" | days[i] == "Sunday") {
weekdays[i] <- "Weekend"
} else {weekdays[i] <- "Weekday"}
}
imputed <- cbind(imputed, as.factor(weekdays))
colnames(imputed) <- c("steps", "date", "interval", "weekday")
dailyAverage2 <- aggregate(steps ~ interval, table, mean)
par(mfrow = c(1,2))
plot(dailyAverage2[dailyAverage2$weekday == "Weekday",], type = "l")
plot(dailyAverage2[dailyAverage2$weekday == "Weekend",], type = "l")
plot(dailyAverage2)
dailyAverage2 <- aggregate(steps ~ interval, imputed, mean)
par(mfrow = c(1,2))
plot(dailyAverage2[dailyAverage2$weekday == "Weekday",], type = "l")
plot(dailyAverage2[dailyAverage2$weekday == "Weekend",], type = "l")
plot(dailyAverage2[dailyAverage2$weekday == "Weekend",], type = "l")
dailyAverage2[dailyAverage2$weekday == "Weekend",]
head(dailyAverage2)
dailyAverage2 <- aggregate(steps ~ interval ~ weekday, imputed, mean)
dailyAverage2 <- aggregate(steps ~ interval + weekday, imputed, mean)
dailyAverage2
dailyAverage2[dailyAverage2$weekday == "Weekend",]
head(dailyAverage)
dailyAverage2[dailyAverage2$weekday == "Weekend",]
plot(dailyAverage2[dailyAverage2$weekday == "Weekend",])
plot(x = dailyAverage2[dailyAverage2$weekday == "Weekend",]$interval, y = dailyAverage2[dailyAverage2$weekday == "Weekend",]$steps)
library(ggplot2)
g <- ggplot(dailyAverage2[dailyAverage2$weekday == "Weekday",], aes(interval, steps))
g + geom_point()
g + geom_lines()
g + geom_line()
g <- ggplot(dailyAverage2, aes(interval, steps))
g + geom_line()
g + geom_line() + facet_grid(. ~ weekday)
